from aiogram import Router, types, F, exceptions
from bot.loader import bot
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from bot.utils.logging import handler
from bot.filters.chat_type import ChatTypeFilter
from bot.utils.api_utils import methods
from bot.keyboards.inline import (
    mood_inline_keyboard,
    mood_back_inline_keyboard,
    post_inline_keyboard,
    post2_inline_keyboard,
)
from aiogram.filters import StateFilter
from aiogram.utils.markdown import hbold, hlink, hitalic

post_router = Router(name='post')
post_router.message.filter(ChatTypeFilter(chat_type=["private"]))


class State(StatesGroup):
    mood = State()
    text = State()
    

@post_router.callback_query(F.data == "mood")
async def mood_handler(callback: types.CallbackQuery, state: FSMContext):
    handler(__name__, type=callback)
    await callback.message.edit_text(
        text=f"{hbold("–ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å?")}\n\n–í—ã–±–µ—Ä–∏ –∏–∑ –º–µ–Ω—é:",
        reply_markup=mood_inline_keyboard(),
    )
    await state.set_state(State.mood)


@post_router.callback_query(F.data.in_(["–û—Ç–ª–∏—á–Ω–æ", "–•–æ—Ä–æ—à–æ", "–ù–æ—Ä–º–∞–ª—å–Ω–æ", "–ü–ª–æ—Ö–æ"]))
async def text_handler(callback: types.CallbackQuery, state: FSMContext):
    handler(__name__, type=callback)
    mood = callback.data
    if mood == "–û—Ç–ª–∏—á–Ω–æ":
        emoji = "üü¢"
    elif mood == "–•–æ—Ä–æ—à–æ":
        emoji = "üîµ"
    elif mood == "–ù–æ—Ä–º–∞–ª—å–Ω–æ":
        emoji = "üü°"
    elif mood == "–ü–ª–æ—Ö–æ":
        emoji = "üî¥"
    await state.update_data({"mood": mood, "emoji": emoji})
    await callback.message.edit_text(
        text=f"{hbold('–ü–æ—á–µ–º—É —Ç—ã —Ç–∞–∫ —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å?')}\n\n–†–∞—Å–ø–∏—à–∏:",
        reply_markup=mood_back_inline_keyboard(),
    )
    await state.set_state(State.text)

@post_router.message(State.text)
async def post_handler(message: types.Message, state: FSMContext):
    handler(__name__, type=message)
    try:
        text = message.text
        data = await state.get_data()
        await state.update_data({"text": text})
        if len(text) < 20:
            await message.answer("–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ(")
            return
        await message.answer(
            text=
            f"{hbold('–¢–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ:')}\n\n"
            f"{hbold("–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:")} {data["mood"]}\n"
            f"{hbold('–¢–µ–∫—Å—Ç:')} {text}\n\n"
            f"{hitalic('P.S.: –ù–µ—ç—Ç–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã(')}",
            reply_markup=post_inline_keyboard(),
        )

    except exceptions.TelegramBadRequest as e:
        if "message is too long" in str(e):
            await message.answer("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ(")
            return

@post_router.callback_query(StateFilter(State), F.data == "post")
async def post_callback(callback: types.CallbackQuery, state: FSMContext):
    handler(__name__, type=callback)
    data = await state.get_data()
    emoji = data["emoji"]
    mood = data["mood"]
    text = data["text"]
    sent_message = await bot.send_message(
        chat_id=-1002143350485,
        text=f"{emoji} –ê–Ω–æ–Ω–∏–º —á—É–≤—Å—Ç–≤—É–µ—Ç —Å–µ–±—è {hbold(mood.lower())}:\n\n{text}\n\n{hlink('–û—Ç–≤–µ—Ç–∏—Ç—å', 't.me/thoughty_bot/')} | {hlink('–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è', 't.me/thoughty_bot/')}", 
        parse_mode="HTML"
    )
    await callback.message.edit_text("–¢–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!", reply_markup=post2_inline_keyboard())
    await methods.create_post(telegram_user_id=callback.from_user.id, telegram_message_id=sent_message.message_id, mood=mood, text=text)        
    await state.clear()


